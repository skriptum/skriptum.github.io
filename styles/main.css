body {
    padding: 0;
    margin: 0;
    min-height: 100vh;
    background-color:rgb(66, 14, 10);
    font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
    font-size: 2vh;
    width: 100%;
  }


.sq-image {
  position: absolute;
  width: 100%;
  border-radius: 1vmin;
}

.square-div {
  position: relative;
  width: 100%;

  content: "";
  display: block;
  padding-bottom: 100%;
  background-color: #f9f9f9;
  margin-bottom: 5%;
  box-shadow: 1vmin 1vmin 2vmin rgba(0, 0, 0, 0.4);
  border-radius: 2vmin;
  overflow:scroll;
}


.sq-content {
  padding: 5%;
  padding-top: 60%;
  position: absolute;
  width: 90%;
  height: 30%;
  overflow: scroll;
  text-align: center;
}

.btn {
  background: none;
  border: none;
  cursor: pointer;
  line-height: 1.5;
  font: 700 1.2rem "Roboto Slab", sans-serif;
  padding: 1em 2em;
  letter-spacing: 0.05rem;
  min-width: 50%;
  min-height: 5vh;
}

canvas{
  position:fixed;
  left:0;
  top:0;
  z-index:-1;
  height: 100%;
}

.logo-img { width: 80%; height: auto; }

.cube-wrap {
  --size: 15vmin;
  position: fixed;
  width: 0;
  height: 0;
  perspective: 100vmin;
}

.right-side {
  border-radius: 2vw;
  padding: 5%;
  color: black;   
  margin: 5%;
  background-color: whitesmoke;
}

.left-content {
  padding: 5%;
  color: white;
}

.left-side {
  padding: 5%;
  color: white;
}


/* Custom definitions of the content 
depending on orientation*/

@media screen and (orientation:portrait) {
  .left-side {
    width: 90vw;
    position:static;
    height: 20%;
    margin-top: 20vh;
    text-align: center;
  }
    
  .right-side {
    position:static;
  }

  .left-content {
    position: static;
    }

  .cube-wrap {
    top: 10%;
    left: 50%;
  }

  
}

@media screen and (orientation:landscape) { 
  .left-side {
    top: 35%;
    position: fixed;
    height: 20vh;
    width: 50vw;
  }

  .left-content {
    position: fixed;
    width: 40vw;
    margin-top: 60vh;
    }

  .right-side {
    left: 45%;
    width: 35vw;
    position: relative;
  }

  .cube-wrap {
    top: 20%;
    left: 25%;
  }

}


/* Everything related to the button animation */
.draw-border {
  box-shadow: inset 0 0 0 5px #000000;
  color: #000000;
  transition: color 0.25s 0.0833333333s;
  position: relative;
}
.draw-border::before, .draw-border::after {
  border: 0 solid transparent;
  box-sizing: border-box;
  content: "";
  pointer-events: none;
  position: absolute;
  width: 0;
  height: 0;
  bottom: 0;
  right: 0;
}
.draw-border::before {
  border-bottom-width: 5px;
  border-left-width: 5px;
}
.draw-border::after {
  border-top-width: 5px;
  border-right-width: 5px;
}
.draw-border:hover {
  color: rgb(255, 174, 0);
}
.draw-border:hover::before, .draw-border:hover::after {
  border-color: rgb(255, 174, 0);
  transition: border-color 0s, width 0.25s, height 0.25s;
  width: 100%;
  height: 100%;
}
.draw-border:hover::before {
  transition-delay: 0s, 0s, 0.25s;
}
.draw-border:hover::after {
  transition-delay: 0s, 0.25s, 0s;
}


/* everythin related to the progress bar at the top */
.progress {
  height: 1vmin;
  width: 0%;
  background-color: rgb(255, 136, 0);
  position: fixed;
  top: 0;
  left: -10;
  animation: progress 1s linear;
  border-radius: 0.2vw;
}
@keyframes progress {
  to {
    background-color: rgb(201, 7, 0);
    width: 100%;
  }
}

/*everything related to the cube */
.cube {
  transform-style: preserve-3d;
  transform: rotateX(0deg) rotateZ(45deg) rotateY(45deg);
  animation: cube 1s linear;
}
@keyframes cube {
  to {
    transform: rotateX(420deg) rotateZ(45deg) rotateY(45deg);
  }
}

.side {
  position: absolute;
  width: var(--size);
  height: var(--size);
  background-color: #c0b6b4; /* 2 */
  backface-visibility: visible;
  top: calc(var(--size) * -.5);
  left: calc(var(--size) * -.5);
}
.top {
  background-color: #df826d; /*1*/
  transform: rotateX(90deg) translateZ(calc(var(--size) * .5));
}
.bottom {
  background-color: #a03f2c; /* 7 */
  transform: rotateX(90deg) translateZ(calc(var(--size) * -.5));
}
.left {
  background-color: #d85035; /* 4 */
  transform: rotateY(90deg) translateZ(calc(var(--size) * .5));
}
.right {
  background-color: #df5e41; /* 3 */
  transform: rotateY(90deg) translateZ(calc(var(--size) * -.5));
}
.front {
  background-color: #b64630; /* 6 */
  transform: translateZ(calc(var(--size) * .5));
}
.back {
  background-color: #c9452b; /* 5 */
  transform: translateZ(calc(var(--size) * -.5));
}

:root * {
  /* Pause the animation */
  animation-play-state: paused;
  /* Bind the animation to scroll */
  animation-delay: calc(var(--scroll) * -1s);
  /* These last 2 properites clean up overshoot weirdness */
  animation-iteration-count: 1;
  animation-fill-mode: both;
}

